============================================
TEXT GUIDE for LoRaWan, LoPy, sensors LAB
============================================


THIS PART covered in SLIDES:


Understand LoRa, LoRaWan, TheThingsNetwork
============================================

and how the three relate.


Essentials of LoRaWan security
============================================

Understand 

Device, App, Networks EUIs and keys

DevEUI
AppEUI, AppKey



======================================================

======================================================

Work with your LoPy / pymakr.
============================================

We demo this.

Understand:

Atom IDE
REPL
CTRL-A,B,C,D
uploading
syncing


What is the REPL?
MicroPython Interactive Interpreter Mode. A commonly used term for this is REPL (read-eval-print-loop) which will be used to refer to this interactive prompt.
It looks like this:

>>>

Learn how it works: https://docs.pycom.io/pycom_esp32/reference/repl.html


CTRL-A
raw REPL - we wont need this.

CTRL-B:
brings you back to REPL.

CTRL-C:
You can interrupt a running program by pressing Ctrl-C. This will raise a KeyboardInterrupt which will bring you back to the REPL, providing your program doesnâ€™t intercept the KeyboardInterrupt exceptio

CTRL-D:
performs a soft reset. You will see a message something like:

>>>
PYB: soft reboot
MicroPython v1.4.6-146-g1d8b5e5 on 2016-10-21; LoPy with ESP32
Type "help()" for more information.
>>>

Another way to do a soft reset:
>>> import sys
>>> sys.exit()

or, as python code:

raise SystemExit




When things go wrong - and they do! - ... you can:
========================================================

Reset with button.

Reconnect device.

Do a hard reset:
>>> import machine
>>> machine.reset()

Factory reset the file system:

>>> import os
>>> os.mkfs('/flash')

Safe Boot.

Update Firmware.

Learn more:
https://docs.pycom.io/pycom_esp32/pycom_esp32/toolsandfeatures.html#safeboot

==============================================================================================

Now that we control the LoPy (somewhat),
let s try a  project:

Make a new project,
make a new empty folder for it.

take some sample code, e.g. the traffic light,
and paste it into a new window:

----------------------------------------------------
import pycom
import time
pycom.heartbeat(False)
for cycles in range(10): # stop after 10 cycles
    pycom.rgbled(0x007f00) # green
    time.sleep(5)
    pycom.rgbled(0x7f7f00) # yellow
    time.sleep(1.5)
    pycom.rgbled(0x7f0000) # red
    time.sleep(4)
----------------------------------------------------

Save as main.py.

To be safe, also make a boot.py:

----------------------------------------------------
from machine import UART
import os
uart = UART(0, 115200)
os.dupterm(uart)
----------------------------------------------------

Now sync that project into the device:

Now, here i often hang ... i do
>>> import os
>>> os.mkfs('/flash')

>>> os.listdir()
[]
>>> os.getcwd()
'/flash'

More on this:
https://micropython.org/resources/docs/en/latest/wipy/library/os.html

The sync:

Syncing the project with the Pycom device. Please wait...
Successfully synced!

Note!!! You cannot sync if your i2c bus is busy, e.g. busy with a sensor.

Soft reboot, and you code should run -
e.g. the traffic light.


==============================================================================================

Now let s talk LoRa.

First, let s get our DevEUI:

----------------------------------------------------
#get your device's EUI
from network import LoRa
import binascii
lora = LoRa(mode=LoRa.LORAWAN, region=LoRa.EU868)
print(binascii.hexlify(lora.mac()).upper().decode('utf-8'))
----------------------------------------------------

Now that we know our DevEUI,

we need to either

1/ register on TTN, make an application, register our device

or

2/ collaborate on the current  course app called "iot2019-course" (ask lecturer, TA)

or

3/ request keys for existing application from lecturer, TA

There s also a LearnIT Forum thread -

groups can (but dont have to!) fill in their Device ID with group number/name.

Everybody is welcome to register on TTN themselves, if they like to.

When this is done, we know our AppEUI and AppKey,
which we can share on the forum again, where needed.

We are ready to run this code, to register our device OTAA:

----------------------------------------------------------------------
import binascii
import pycom
import socket
import time
from network import LoRa

# Colors
off = 0x000000
red = 0xff0000
green = 0x00ff00
blue = 0x0000ff

# Turn off heartbeat LED
pycom.heartbeat(False)

# Initialize LoRaWAN radio
lora = LoRa(mode=LoRa.LORAWAN, region=LoRa.EU868)

# Set network keys
app_eui = binascii.unhexlify('YOUR_APP_EUI')
app_key = binascii.unhexlify('YOUR_APP_KEY')

# Join the network
lora.join(activation=LoRa.OTAA, auth=(app_eui, app_key), timeout=0)
pycom.rgbled(red)

# Loop until joined
while not lora.has_joined():
    print('Not joined yet...')
    pycom.rgbled(off)
    time.sleep(0.1)
    pycom.rgbled(red)
    time.sleep(2)

print('Joined')
pycom.rgbled(blue)

s = socket.socket(socket.AF_LORA, socket.SOCK_RAW)
s.setsockopt(socket.SOL_LORA, socket.SO_DR, 5)
s.setblocking(True)

i = 0
while True:
    count = s.send(bytes([i % 256]))
    print('Sent %s bytes' % count)
    pycom.rgbled(green)
    time.sleep(0.1)
    pycom.rgbled(blue)
    time.sleep(9.9)
    i += 1
--------------------------------------------------------------------------


Check if all devices show up  ok, and are sending data.

=======================================================================
Sensors
=======================================================================

Now we can look at reading data from any sensor.


A general sensor can be read like this - note that this will work and produce some (random!) numbers
even if there is no actual sensor attached: 

---------------------------------------------------------------------
#reading an analog sensor with lopy
#https://docs.pycom.io/pycom_esp32/library/machine.ADC.html#class-adcchannel-read-analog-values-from-internal-or-external-sources
import machine
adc = machine.ADC()             # create an ADC object
apin = adc.channel(pin='P17')   # create an analog pin on P17 - look out for pin confusion
for cycles in range(1000): # stop after 1000 cycles
    val = apin()                    # read an analog value
    apin.value()			# same
    print(val)
    time.sleep(1)
---------------------------------------------------------------------

If you are using a pytrack or pysense board,
you could start reading the accelerometer:

https://docs.pycom.io/tutorials/pytrack.html



--------------------------------------------------------------------




Now combine the two elements -

1/ LoRaWan network
&
2/ Sensors

to send sensor data to TTN.

You may want to start sending some bogus data at first,
and then add the actual sender readings.


-----------------------------------------------------------------------------

Here is code specific to the sensor we ll be using:

(tbc)







































